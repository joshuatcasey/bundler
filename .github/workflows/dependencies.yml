name: Dependencies (Retrieve, Metadata, Compile, Test, Create PR)

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */12 * * *'  # https://crontab.guru/every-12-hours
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  select-go-version:
    name: Select Go Version
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.select-go-version.outputs.go-version }}
    steps:
      - name: Select Go Version
        id: select-go-version
        run: echo "::set-output name=go-version::>=1.18.0"
  get-branch-name:
    name: Get Branch Name
    runs-on: ubuntu-latest
    outputs:
      branch-name: ${{ steps.setup-branch-name.outputs.branch-name }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Setup branch name
        id: setup-branch-name
        run: echo "::set-output name=branch-name::automation/dependencies/bump-$(git rev-parse --short HEAD)-$(date +%s)"
  get_operating_systems:
    name: Get Operating Systems
    runs-on: ubuntu-latest
    outputs:
      operating_systems: ${{ steps.get_operating_systems.outputs.operating_systems }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Get Operating Systems
        id: get_operating_systems
        run: |
          operatingSystems=$(cat dependency/operating_systems.json)
          echo "Found operatingSystems ${operatingSystems}"
          echo "::set-output name=operating_systems::${operatingSystems}"
      - name: Found '${{ steps.get_operating_systems.outputs.operating_systems }}'
        run: echo ${{ steps.get_operating_systems.outputs.operating_systems }}
  retrieve:
    name: Retrieve new versions
    needs:
      - select-go-version
    runs-on: ubuntu-latest
    outputs:
      new_versions: ${{ steps.retrieve.outputs.new_versions }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Setup go '${{ needs.select-go-version.outputs.go-version }}'
        uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.select-go-version.outputs.go-version }}
      - name: Retrieve new versions
        id: retrieve
        working-directory: dependency
        run: |
          versions=$(make retrieve)
          echo "Found versions ${versions}"
          echo "::set-output name=new_versions::${versions}"
      - name: Found '${{ steps.retrieve.outputs.new_versions }}'
        run: echo ${{ steps.retrieve.outputs.new_versions }}
  metadata:
    name: Retrieve metadata for new versions
    needs:
      - retrieve
    strategy:
      matrix:
        version: ${{ fromJSON(needs.retrieve.outputs.new_versions) }}
    runs-on: ubuntu-latest
    outputs:
      metadata: ${{ steps.metadata.outputs.metadata }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Get metadata filepath
        id: get-metadata-filepath
        run: |
          echo "::set-output name=metadata-filepath::${{ github.workspace }}/metadata-${{ matrix.version }}.json"
      - name: Add Metadata for version
        id: metadata
        working-directory: dependency
        run: |
          make metadata \
            version="${{ matrix.version }}" \
            output="${{ steps.get-metadata-filepath.outputs.metadata-filepath }}"
      - name: Output metadata '${{ steps.get-metadata-filepath.outputs.metadata-filepath }}'
        working-directory: dependency
        run: cat ${{ steps.get-metadata-filepath.outputs.metadata-filepath }}
      - name: Upload `${{ steps.get-metadata-filepath.outputs.metadata-filepath }}'
        uses: actions/upload-artifact@v3
        with:
          name: metadata-${{ matrix.version }}.json
          path: ${{ steps.get-metadata-filepath.outputs.metadata-filepath }}
  compile:
    name: Compile
    needs:
      - get_operating_systems
      - retrieve
    strategy:
      matrix:
        os: ${{ fromJSON(needs.get_operating_systems.outputs.operating_systems) }}
        version: ${{ fromJSON(needs.retrieve.outputs.new_versions) }}
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Setup tarball name
        id: tarball_name
        run: |
          echo "::set-output name=tarball_name::$(cat dependency/ID)-${{ matrix.version }}-${{ matrix.os }}"
      - name: Prepare '${{ matrix.os }}'
        run: . dependency/prepare/${{ matrix.os }}
      - name: Compile '${{ steps.tarball_name.outputs.tarball_name }}'
        id: compile
        working-directory: dependency
        run: |
          make compile \
            version="${{ matrix.version }}" \
            tarball_name="${{ steps.tarball_name.outputs.tarball_name }}.tgz" \
            os="${{ matrix.os }}"
      - name: Test '${{ steps.tarball_name.outputs.tarball_name }}'
        working-directory: dependency
        run: |
          make test \
            version="${{ matrix.version }}" \
            tarball_name="${{ steps.tarball_name.outputs.tarball_name }}.tgz"
      - name: Upload '${{ steps.tarball_name.outputs.tarball_name }}'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.tarball_name.outputs.tarball_name }}
          path: 'dependency/${{ steps.tarball_name.outputs.tarball_name }}.tgz*'
  assemble:
    name: Assemble Metadata information
    needs:
      - metadata
      - compile
      - select-go-version
      - get-branch-name
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.get-branch-name.outputs.branch-name }}
      - name: Setup go '${{ needs.select-go-version.outputs.go-version }}'
        uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.select-go-version.outputs.go-version }}
      - name: Setup temp dir
        id: setup-temp-dir
        run: |
          echo "::set-output name=artifactPath::$(mktemp -d)"
      - name: Get all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ${{ steps.setup-temp-dir.outputs.artifactPath }}
      - name: List everything
        working-directory: ${{ steps.setup-temp-dir.outputs.artifactPath }}
        run: ls -lsaRth
      - name: Run assemble
        working-directory: libdependency
        run: |
          make assemble \
            id="$(cat ${{ github.workspace }}/dependency/ID)" \
            artifactPath=${{ steps.setup-temp-dir.outputs.artifactPath }} \
            buildpackTomlPath=${{ github.workspace }}/buildpack.toml
      - name: Show git diff
        run: |
          cat ${{ github.workspace }}/buildpack.toml
          git diff
      - name: Commit
        id: commit
        uses: paketo-buildpacks/github-config/actions/pull-request/create-commit@main
        with:
          message: "Pruning buildpack.toml"
          pathspec: "."
      - name: Push Branch '${{ needs.get-branch-name.outputs.branch-name }}'
        uses: paketo-buildpacks/github-config/actions/pull-request/push-branch@main
        with:
          branch: ${{ needs.get-branch-name.outputs.branch-name }}
  submit-pull-request:
    name: Submit Pull Request
    needs:
      - get-branch-name
      - assemble
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.get-branch-name.outputs.branch-name }}
      - name: PR Title
        id: title
        run: |
          echo "::set-output name=include_versions:: with new dependency versions: ${{ matrix.version }}"
      - name: Open Pull Request
        run: |
          gh pr create \
            --title "Updates buildpack.toml with ${{ needs.retrieve.outputs.new_versions }}" \
            --body "See commit history for details" \
            --base main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
