name: Dependencies (Retrieve, Metadata, Compile, Test, Create PR)

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */12 * * *'  # https://crontab.guru/every-12-hours
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  select-go-version:
    name: Select Go Version
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.select-go-version.outputs.go-version }}
    steps:
      - name: Select Go Version
        id: select-go-version
        run: echo "::set-output name=go-version::>=1.18.0"
  # get-targets:
  #   name: Get Targets
  #   runs-on: ubuntu-latest
  #   outputs:
  #     targets: ${{ steps.get-targets.outputs.targets }}
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v2
  #     - name: Get Image IDs
  #       id: get-targets
  #       working-directory: dependency
  #       run: |
  #         TARGETS=$(cat targets.json)
  #         TARGETS="${TARGETS//'%'/'%25'}"
  #         TARGETS="${TARGETS//$'\n'/'%0A'}"
  #         TARGETS="${TARGETS//$'\r'/'%0D'}"
  #         echo "::set-output name=targets::${TARGETS}"
  #     - name: Print Targets
  #       run: echo "${{ steps.get-targets.outputs.targets }}"
  #
  # TODO: what happens when there are no new versions
  retrieve:
    name: Retrieve new versions and generate metadata
    needs:
      - select-go-version
    runs-on: ubuntu-latest
    outputs:
      metadata-filepath: ${{ steps.retrieve.outputs.metadata-filepath }}
      metadata-json: ${{ steps.retrieve.outputs.metadata-json }}
      id: ${{ steps.retrieve.outputs.id }}
      # new_versions: ${{ steps.retrieve.outputs.new_versions }}
      # name: ${{ steps.retrieve.outputs.name }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Setup go '${{ needs.select-go-version.outputs.go-version }}'
        uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.select-go-version.outputs.go-version }}
      - name: Run Retrieve
        id: retrieve
        working-directory: dependency
        run: |
          OUTPUT="/tmp/metadata.json"

          make retrieve \
            buildpackTomlPath="${{ github.workspace }}/buildpack.toml" \
            output="${OUTPUT}"


          id=`cat "${OUTPUT}" | jq -r .[0].id`
          echo "Metadata JSON output for $id:"
          content=`cat "${OUTPUT}" | jq -r`

          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"

          echo "::set-output name=metadata-filepath::${OUTPUT}"
          echo "::set-output name=metadata-json::$content"
          echo "::set-output name=id::$id"
      ## TODO do we need this?
      - name: Upload `${{ steps.retrieve.outputs.metadata-filepath }}`
        uses: actions/upload-artifact@v3
        with:
          name: metadata.json
          path: ${{ steps.retrieve.outputs.metadata-filepath }}

  compile:
    name: Compile
    needs:
      - retrieve
    # if: ${{ fromJSON(needs.retrieve.outputs.metadata-json).*.sha256 == '' && fromJSON(needs.retrieve.outputs.metadata-json).*.uri = '' }}
    strategy:
      matrix:
        version: ${{ fromJSON(needs.retrieve.outputs.metadata-json).* }}
        # version: ${{ fromJSON(needs.retrieve.outputs.metadata-json).*.version }}
        # target: ${{ fromJSON(needs.retrieve.outputs.metadata-json).*.target }}
        # sha256: ${{ fromJSON(needs.retrieve.outputs.metadata-json).*.sha256 }}
        # uri: ${{ fromJSON(needs.retrieve.outputs.metadata-json).*.uri }}
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Make Temporary Artifact Directory
        id: make-outputdir
        run: |
          echo "::set-output name=outputdir::$(mktemp -d)"
      # - name: Create matrix.json
      #   working-directory: "${{ steps.make-outputdir.outputs.outputdir }}"
      #   run: |
      #     echo '${{ toJSON(matrix) }}'
      #     echo '${{ toJSON(matrix).version }}'
      - name: Parse version and target from matrix 
        id: parse-matrix
        run: |
          echo "::set-output name=version::$(echo '${{ toJSON(matrix) }}' | jq -r .version.version)"
          echo "::set-output name=target::$(echo '${{ toJSON(matrix) }}' | jq -r .version.target)"
      - name: Compile version ${{ steps.parse-matrix.outputs.version }} on ${{ steps.parse-matrix.outputs.target }} Dockerfile
        id: compile
        # TODO make this a local path
        uses: joshuatcasey/bundler/dependency/actions/compile@sophie-experiment
        with:
          version: "${{ steps.parse-matrix.outputs.version }}"
          outputDir: "${{ steps.make-outputdir.outputs.outputdir }}"
          target: "${{ steps.parse-matrix.outputs.target }}"
      # - name: Test
      #   working-directory: dependency
      #   run: |
      #     make test \
      #       version="${{ matrix.version }}" \
      #       tarball_name="${{ steps.make-outputdir.outputs.outputdir }}/*.tgz"
      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: '${{ needs.retrieve.outputs.id }}-${{ matrix.version }}-${{ matrix.target }}'
          path: '${{ steps.make-outputdir.outputs.outputdir }}/*'
  # assemble:
  #   name: Assemble Metadata information
  #   needs:
  #     - metadata
  #     - compile
  #     - select-go-version
  #     - retrieve
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v2
  #     - name: Setup go '${{ needs.select-go-version.outputs.go-version }}'
  #       uses: actions/setup-go@v3
  #       with:
  #         go-version: ${{ needs.select-go-version.outputs.go-version }}
  #     - name: Setup temp dir
  #       id: setup-temp-dir
  #       run: |
  #         echo "::set-output name=artifactPath::$(mktemp -d)"
  #     - name: Get all artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         path: ${{ steps.setup-temp-dir.outputs.artifactPath }}
  #     - name: List everything
  #       working-directory: ${{ steps.setup-temp-dir.outputs.artifactPath }}
  #       run: ls -lsaRth
  #     - name: Run assemble
  #       working-directory: libdependency
  #       run: |
  #         make assemble \
  #           id="${{ needs.retrieve.outputs.id }}" \
  #           artifactPath=${{ steps.setup-temp-dir.outputs.artifactPath }} \
  #           buildpackTomlPath=${{ github.workspace }}/buildpack.toml
  #     - name: Checkout Branch 'automation/dependencies/update'
  #       uses: paketo-buildpacks/github-config/actions/pull-request/checkout-branch@main
  #       with:
  #         branch: automation/dependencies/update
  #     - name: Show git diff
  #       run: |
  #         cat ${{ github.workspace }}/buildpack.toml
  #         git diff
  #     - name: Commit
  #       id: commit
  #       uses: paketo-buildpacks/github-config/actions/pull-request/create-commit@main
  #       with:
  #         message: "Updating buildpack.toml with new versions ${{ needs.retrieve.outputs.new_versions }}"
  #         pathspec: "."
  #     - name: Push Branch 'automation/dependencies/update'
  #       if: ${{ steps.commit.outputs.commit_sha != '' }}
  #       uses: paketo-buildpacks/github-config/actions/pull-request/push-branch@main
  #       with:
  #         branch: automation/dependencies/update
  # submit-pull-request:
  #   name: Submit Pull Request
  #   needs:
  #     - assemble
  #     - retrieve
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v2
  #       with:
  #         ref: automation/dependencies/update
  #     - name: Open Pull Request
  #       run: |
  #         gh pr create \
  #           --title "Updates buildpack.toml with ${{ needs.retrieve.outputs.new_versions }}" \
  #           --body "See commit history for details" \
  #           --base main
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
