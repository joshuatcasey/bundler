name: Dependencies (Retrieve, Metadata, Compile, Test, Create PR)

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */12 * * *'  # https://crontab.guru/every-12-hours

jobs:
  get_operating_systems:
    name: Get Operating Systems
    runs-on: ubuntu-latest
    outputs:
      operating_systems: ${{ steps.get_operating_systems.outputs.operating_systems }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Get Operating Systems
        id: get_operating_systems
        run: |
          operatingSystems=$(cat dependency/operating_systems.json)
          echo "Found operatingSystems ${operatingSystems}"
          echo "::set-output name=operating_systems::${operatingSystems}"
      - name: Found ${{ steps.get_operating_systems.outputs.operating_systems }}
        run: echo ${{ steps.get_operating_systems.outputs.operating_systems }}
  retrieve:
    name: Retrieve new versions
    runs-on: ubuntu-latest
    outputs:
      new_versions: ${{ steps.retrieve.outputs.new_versions }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Setup go >=1.18.0
        uses: actions/setup-go@v3
        with:
          go-version: '>=1.18.0'
      - name: Retrieve new versions
        id: retrieve
        run: |
          pushd dependency > /dev/null
            versions=$(make retrieve)
            echo "Found versions ${versions}"
            echo "::set-output name=new_versions::${versions}"
          popd > /dev/null
      - name: Found ${{ steps.retrieve.outputs.new_versions }}
        run: echo ${{ steps.retrieve.outputs.new_versions }}
  compile:
    name: Compile Bundler
    needs:
      - get_operating_systems
      - retrieve
    strategy:
      matrix:
        os: ${{ fromJSON(needs.get_operating_systems.outputs.operating_systems) }}
        version: ${{ fromJSON(needs.retrieve.outputs.new_versions) }}
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Compile ${{ matrix.version }}
        id: compile
        run: |
          pushd dependency > /dev/null
            make compile version="${{ matrix.version }}"
            echo "::set-output name=tarball_path::bundler-${{ matrix.version }}.tgz"
          popd > /dev/null
      - run: '[[ $(echo "${{ matrix.os }}" | grep "macos") ]] && brew install coreutils || true'
      - name: Test ${{ matrix.version }}
        run: |
          pushd dependency > /dev/null
            make test version="${{ matrix.version }}" tarball_path="${{ steps.compile.outputs.tarball_path }}" os="${{ matrix.os }}"
          popd > /dev/null
