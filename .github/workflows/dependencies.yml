name: Dependencies (Retrieve, Metadata, Compile, Test, Create PR)

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */12 * * *'  # https://crontab.guru/every-12-hours

jobs:
  get_operating_systems:
    name: Get Operating Systems
    runs-on: ubuntu-latest
    outputs:
      operating_systems: ${{ steps.get_operating_systems.outputs.operating_systems }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Get Operating Systems
        id: get_operating_systems
        run: |
          operatingSystems=$(cat dependency/operating_systems.json)
          echo "Found operatingSystems ${operatingSystems}"
          echo "::set-output name=operating_systems::${operatingSystems}"
      - name: Found ${{ steps.get_operating_systems.outputs.operating_systems }}
        run: echo ${{ steps.get_operating_systems.outputs.operating_systems }}
  retrieve:
    name: Retrieve new versions
    runs-on: ubuntu-latest
    outputs:
      new_versions: ${{ steps.retrieve.outputs.new_versions }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Setup go >=1.18.0
        uses: actions/setup-go@v3
        with:
          go-version: '>=1.18.0'
      - name: Retrieve new versions
        id: retrieve
        run: |
          pushd dependency > /dev/null
            versions=$(make retrieve)
            echo "Found versions ${versions}"
            echo "::set-output name=new_versions::${versions}"
          popd > /dev/null
      - name: Found ${{ steps.retrieve.outputs.new_versions }}
        run: echo ${{ steps.retrieve.outputs.new_versions }}
  metadata:
    name: Retrieve metadata for new versions
    needs:
      - retrieve
    strategy:
      matrix:
        version: ${{ fromJSON(needs.retrieve.outputs.new_versions) }}
    runs-on: ubuntu-latest
    outputs:
      metadata: ${{ steps.metadata.outputs.metadata }}
    steps:
      - name: Check Cache Metadata for ${{ matrix.version }}
        id: cache-check
        uses: actions/cache@v3
        with:
          path: dependency/metadata-${{ matrix.version }}.json
          key: metadata-${{ matrix.version }}.json
      - name: Check out code
        if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
        uses: actions/checkout@v2
      - name: Add Metadata for version
        id: metadata
        if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
        run: |
          set -euo pipefail
          pushd dependency > /dev/null
            metadata=$(make metadata version="${{ matrix.version }}")
            echo "${metadata}" > "metadata-${{ matrix.version }}.json"
            echo "::set-output name=metadata::${metadata}"
          popd > /dev/null
      - name: Found ${{ steps.metadata.outputs.metadata }}
        if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
        run: echo ${{ steps.metadata.outputs.metadata }}
      - name: Cache Metadata for ${{ matrix.version }}
        if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
        uses: actions/cache@v3
        with:
          path: dependency/metadata-${{ matrix.version }}.json
          key: metadata-${{ matrix.version }}.json
  compile:
    name: Compile
    needs:
      - get_operating_systems
      - retrieve
    strategy:
      matrix:
        os: ${{ fromJSON(needs.get_operating_systems.outputs.operating_systems) }}
        version: ${{ fromJSON(needs.retrieve.outputs.new_versions) }}
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Setup tarball name
        id: tarball_name
        run: |
          echo "::set-output name=tarball_name::$(cat dependency/NAME)-${{ matrix.version }}-${{ matrix.os }}.tgz"
      - name: Check Cached Tarball 'dependency/${{ steps.tarball_name.outputs.tarball_name }}'
        id: cache-check
        uses: actions/cache@v3
        with:
          path: dependency/${{ steps.tarball_name.outputs.tarball_name }}
          key: dependency/${{ steps.tarball_name.outputs.tarball_name }}
      - name: Prepare ${{ matrix.os }}
        if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
        run: . dependency/prepare/${{ matrix.os }}
      - name: Compile '${{ steps.tarball_name.outputs.tarball_name }}'
        if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
        id: compile
        run: |
          pushd dependency > /dev/null
            make compile version="${{ matrix.version }}" tarball_name="${{ steps.tarball_name.outputs.tarball_name }}"
          popd > /dev/null
      - name: Test '${{ steps.tarball_name.outputs.tarball_name }}'
        if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
        run: |
          pushd dependency > /dev/null
            make test version="${{ matrix.version }}" tarball_name="${{ steps.tarball_name.outputs.tarball_name }}"
          popd > /dev/null
      - name: Cache Tarball 'dependency/${{ steps.tarball_name.outputs.tarball_name }}'
        if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
        uses: actions/cache@v3
        with:
          path: dependency/${{ steps.tarball_name.outputs.tarball_name }}
          key: dependency/${{ steps.tarball_name.outputs.tarball_name }}
  prepare-commit:
    name: Create Pull Request
    needs:
      - get_operating_systems
      - retrieve
      - metadata
      - compile
    strategy:
      matrix:
        os: ${{ fromJSON(needs.get_operating_systems.outputs.operating_systems) }}
        version: ${{ fromJSON(needs.retrieve.outputs.new_versions) }}
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Setup tarball name
        id: tarball_name
        run: |
          echo "::set-output name=tarball_name::$(cat dependency/NAME)-${{ matrix.version }}-${{ matrix.os }}.tgz"
      - name: Retrieve Metadata for ${{ matrix.version }}
        uses: actions/cache@v3
        with:
          path: dependency/metadata-${{ matrix.version }}.json
          key: metadata-${{ matrix.version }}.json
      - name: Print dependency/metadata-${{ matrix.version }}.json
        run: cat dependency/metadata-${{ matrix.version }}.json
      - name: Retrieve Tarball for ${{ matrix.version }}-${{ matrix.os }}
        uses: actions/cache@v3
        with:
          path: dependency/${{ steps.tarball_name.outputs.tarball_name }}
          key: dependency/${{ steps.tarball_name.outputs.tarball_name }}
      - name: Describe dependency/${{ steps.tarball_name.outputs.tarball_name }}
        run: |
          ls -lsa dependency/${{ steps.tarball_name.outputs.tarball_name }}
      - name: Prepare Commit
        run: |
          pushd dependency > /dev/null
            make prepare-commit metadataPath="../metadata-${{ matrix.version }}.json"
          popd > /dev/null
      - name: Show git diff
        run: git diff
      - name: Commit
        id: commit
        uses: paketo-buildpacks/github-config/actions/pull-request/create-commit@main
        with:
          message: "Updating dependencies in buildpack.toml"
          pathspec: "."
      - name: Push Branch
        if: ${{ steps.commit.outputs.commit_sha != '' }}
        uses: paketo-buildpacks/github-config/actions/pull-request/push-branch@main
        with:
          branch: automation/dependencies/update
      - name: PR Title
        id: title
        run: |
          echo "::set-output name=include_versions:: with new dependency versions: ${{ matrix.version }}"
