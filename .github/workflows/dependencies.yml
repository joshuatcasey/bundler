name: Dependencies (Retrieve, Compile & Test, Create PR)

on:
  workflow_dispatch:
  # https://crontab.guru/every-12-hours
  schedule:
    - cron: '0 */12 * * *'
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  select-go-version:
    name: Select Go Version
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.select-go-version.outputs.go-version }}
    steps:
      - name: Select Go Version
        id: select-go-version
        run: echo "::set-output name=go-version::>=1.18.0"

  # TODO: what happens when there are no new versions
  retrieve:
    name: Retrieve New Versions and Generate Metadata
    needs:
      - select-go-version
    runs-on: ubuntu-latest
    outputs:
      metadata: ${{ steps.retrieve.outputs.metadata }}
      new-versions: ${{ steps.retrieve.outputs.new-versions }}
      id: ${{ steps.retrieve.outputs.id }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Setup Go '${{ needs.select-go-version.outputs.go-version }}'
        uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.select-go-version.outputs.go-version }}
      - name: Retrieve New Versions and Generate Metadata
        id: retrieve
        working-directory: dependency
        run: |
          OUTPUT=$(mktemp)

          make retrieve \
            buildpackTomlPath="${{ github.workspace }}/buildpack.toml" \
            output-file="${OUTPUT}"
          
          echo "::set-output name=output-file::${OUTPUT}"
          
          NEW_VERSIONS=$(jq '[.[].version]' "${OUTPUT}")
          NEW_VERSIONS="${NEW_VERSIONS//'%'/'%25'}"
          NEW_VERSIONS="${NEW_VERSIONS//$'\n'/'%0A'}"
          NEW_VERSIONS="${NEW_VERSIONS//$'\r'/'%0D'}"
          echo "::set-output name=new-versions::${NEW_VERSIONS}"
      - name: Output metadata
        run: jq '.' ${{ steps.retrieve.outputs.output-file }}
      - name: Upload `${{ steps.retrieve.outputs.output-file }}'
        uses: actions/upload-artifact@v3
        with:
          name: metadata.json
          path: ${{ steps.metadata.outputs.output-file }}

  compile:
    name: Compile
    needs:
      - retrieve
    strategy:
      matrix:
        version: ${{ fromJSON(needs.retrieve.outputs.new-versions) }}
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Make Temporary Artifact Directory
        id: make-outputdir
        run: |
          echo "::set-output name=outputdir::$(mktemp -d)"
      - name: Create matrix.json
        working-directory: "${{ steps.make-outputdir.outputs.outputdir }}"
        run: |
          echo '${{ toJSON(matrix) }}' > matrix.json
          cat matrix.json
      - name: Compile version ${{ matrix.version }}
        id: compile
        uses: joshuatcasey/bundler/dependency/actions/compile@main
        with:
          version: "${{ matrix.version }}"
          outputDir: "${{ steps.make-outputdir.outputs.outputdir }}"
          target: "${{ matrix.target }}"
      - name: Test
        working-directory: dependency
        run: |
          make test \
            version="${{ matrix.version }}" \
            tarball_name="${{ steps.make-outputdir.outputs.outputdir }}/*.tgz"
      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: '${{ env.id }}-${{ matrix.version }}-${{ matrix.target }}'
          path: '${{ steps.make-outputdir.outputs.outputdir }}/*'
  assemble:
    name: Assemble Metadata information
    needs:
      - retrieve
      - compile
      - select-go-version
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Setup go '${{ needs.select-go-version.outputs.go-version }}'
        uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.select-go-version.outputs.go-version }}
      - name: Setup temp dir
        id: setup-temp-dir
        run: |
          echo "::set-output name=artifactPath::$(mktemp -d)"
      - name: Get all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ${{ steps.setup-temp-dir.outputs.artifactPath }}
      - name: List everything
        working-directory: ${{ steps.setup-temp-dir.outputs.artifactPath }}
        run: ls -lsaRth
      - name: Run assemble
        working-directory: libdependency
        run: |
          make assemble \
            id="${{ env.id }}" \
            artifactPath=${{ steps.setup-temp-dir.outputs.artifactPath }} \
            buildpackTomlPath=${{ github.workspace }}/buildpack.toml
      - name: Checkout Branch 'automation/dependencies/update'
        uses: paketo-buildpacks/github-config/actions/pull-request/checkout-branch@main
        with:
          branch: automation/dependencies/update
      - name: Show git diff
        run: |
          cat ${{ github.workspace }}/buildpack.toml
          git diff
      - name: Commit
        id: commit
        uses: paketo-buildpacks/github-config/actions/pull-request/create-commit@main
        with:
          message: "Updating buildpack.toml with new versions ${{ needs.retrieve.outputs.new-versions }}"
          pathspec: "."
      - name: Push Branch 'automation/dependencies/update'
        if: ${{ steps.commit.outputs.commit_sha != '' }}
        uses: paketo-buildpacks/github-config/actions/pull-request/push-branch@main
        with:
          branch: automation/dependencies/update
  submit-pull-request:
    name: Submit Pull Request
    needs:
      - assemble
      - retrieve
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          ref: automation/dependencies/update
      - name: Open Pull Request
        run: |
          gh pr create \
            --title "Updates buildpack.toml with ${{ needs.retrieve.outputs.new-versions }}" \
            --body "See commit history for details" \
            --base main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
